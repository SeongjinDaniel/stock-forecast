stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CONTAINER_NAME: banbu-jh
  IMAGE_NAME: registry.gitlab.com/$CI_PROJECT_PATH

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - >
      docker build 
      --build-arg DB_HOST=${DB_HOST}
      --build-arg DB_PORT=${DB_PORT}
      --build-arg DB_NAME=${DB_NAME}
      --build-arg DB_USER=${DB_USER}
      --build-arg DB_PASSWORD=${DB_PASSWORD}
      --build-arg APT_TRADE_SERVICE_KEY=${APT_TRADE_SERVICE_KEY}
      --build-arg APT_LOTTO_SERVICE_KEY=${APT_LOTTO_SERVICE_KEY}
      -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
  only:
    - main

deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
    # SSH 클라이언트 설치 및 설정
    - apt-get update
    - apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
  script:
    # AWS 인스턴스에 접속하여 배포
    - ssh ${AWS_INSTANCE_USER}@${AWS_INSTANCE_IP} "docker login registry.gitlab.com -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD"
    - ssh ${AWS_INSTANCE_USER}@${AWS_INSTANCE_IP} "docker pull ${IMAGE_NAME}:${CI_COMMIT_SHA}"
    - ssh ${AWS_INSTANCE_USER}@${AWS_INSTANCE_IP} "docker stop ${CONTAINER_NAME} || true"
    - ssh ${AWS_INSTANCE_USER}@${AWS_INSTANCE_IP} "docker rm ${CONTAINER_NAME} || true"
    - |
      ssh ${AWS_INSTANCE_USER}@${AWS_INSTANCE_IP} "docker run -d \
        --name ${CONTAINER_NAME} \
        -p 8080:8080 \
        -e SPRING_PROFILES_ACTIVE=prod \
        -e DB_HOST=${DB_HOST} \
        -e DB_PORT=${DB_PORT} \
        -e DB_NAME=${DB_NAME} \
        -e DB_USER=${DB_USER} \
        -e DB_PASSWORD=${DB_PASSWORD} \
        ${IMAGE_NAME}:${CI_COMMIT_SHA}"
  environment:
    name: production
    url: http://${AWS_INSTANCE_IP}:8080
  only:
    - main 
    